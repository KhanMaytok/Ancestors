NAMESPACE = ACS

########################
## TIAMAT EVENT CHAIN ##
########################
# ACS.00001 - Tiamat comet in the sky
narrative_event = {
	id = ACS.00001
	title = ACS_00001_TITLE
	desc = ACS_00001_DESC
	is_triggered_only = yes
	ai = no
	picture = GFX_evt_tiamat

	trigger = {
		NOT = { has_global_flag = comet_tiamat }
		OR = {
			multiplayer = no
			AND = {
				multiplayer = yes
				is_multiplayer_host_character = yes
			}
		}
	}

	option = {
		name = ACS_00001_OPT_A
		set_global_flag = comet_tiamat

		random_character = {
			limit = {
				has_landed_title = c_venezia
				is_merchant_republic = yes
			}
			character_event = { id = ACS.00002 } # Kill a entire patrician family
		}
		random_character = { # Spawn for another merchant republic
			limit = {
				is_merchant_republic = yes
			}
			character_event = { id = ACS.00002 days = 5 } # Kill a entire patrician family
		}
		random_character = { # Spawn for another merchant republic
			limit = {
				is_ruler = yes
				is_landed = yes
				real_tier = DUKE
				ai = yes
			}
			set_character_flag = transition_to_republic
			character_event = { id = ACS.00002 days = 15 } # Kill a entire patrician family
		}

		character_event = { id = ACS.00003 days = 32 } # Player is notified about Tiamat devastation

		hidden_tooltip = { # Loop for the provinces
			set_variable = { which = provs value = 5 }
			while = {
				limit = {
					check_variable = {
						which = provs
						value = 1
					}
				}
				subtract_variable = {
					which = provs
					value = 1
				}
				random_province = {
					limit = {
						not = { owner = { character = ROOT } }
						is_land =  yes
					}
					add_province_modifier = { name = devastated_by_tiamat years = 20 }
					any_province_character = {
						death = { death_reason = death_murder_unknown_combustion }
					}
					any_province_holding = {
						limit = {
							is_capital = no
						}
						destroy_settlement = yes
					}
				}
			}
		}
	}
}

# ACS.00002 - Kill a entire patrician family
character_event = {
	id = ACS.00002
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		NOT = { has_global_flag = infiltered_venezia }
	}

	immediate = {
		set_global_flag = infiltered_venezia
		if = {
			limit = {
				has_character_flag = transition_to_republic
			}
			set_government_type = merchant_republic_government
		}
		
		any_vassal = {
			set_character_flag = check_for_dissapears
		}

		# Create OLAF
		create_character = {
			dynasty = 300001
			religion = ROOT
			culture = ROOT
			trait = cruel
			trait = ambitious
			trait = elusive_shadow
			trait = shrewd
			trait = quick
			trait = hunter
			trait = diligent
			trait = lustful
			trait = robust
			trait = strategist
			trait = socializer
			trait = hedonist
			trait = seducer
		}
		new_character = {
			set_character_flag = is_olaf
			set_character_flag = originated_from_chinese_court
			set_character_flag = immune_tuberculosis
			set_character_flag = immune_bubonic_plague
			create_family_palace = yes
			character_event = { id = ACS.00004 }
		}

		random_vassal = {
			limit = {
				is_patrician = yes
				NOT = { has_character_flag = is_olaf }
				ai = yes
			}
			any_dynasty_member = {
				death = {
					death_reason = death_poor_health
				}
			}
			death = {
				death_reason = death_poor_health
			}
		}
	}	
}

# ACS.00003 - Player is notified about Tiamat devastation
character_event = {
	id = ACS.00003
	desc = ACS_00003_DESC
	picture = GFX_evt_emissary_byzantine
	is_triggered_only = yes

	option = {
		name = OK
	}
}

#####################
## THE SPAWN EVENT ##
#####################
# ACS.00004 - Spawn Senua, Olaf and Tilda and parents
character_event = {
	id = ACS.00004
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		save_event_target_as = olaf_the_killer

		create_character = { # Olaf spouse
			female = yes
			age = 18
			trait = grey_eminence
			trait = physician
			trait = scarred
			trait = fair
			trait = quick
			trait = shrewd
			trait = gardener
			trait = poet
			trait = diligent
			trait = lustful
			trait = proud
			trait = brave
			trait = erudite
			trait = defensive_leader
			culture = ROOT
			religion = ROOT
			dynasty = none
		}
		new_character = {
			add_spouse = ROOT
			add_lover = ROOT
			save_event_target_as = olaf_spouse
			set_character_flag = immune_tuberculosis
			set_character_flag = immune_bubonic_plague
		}

		create_character = { # Olaf child 1
			female = yes
			age = 7
			random_traits = yes
			culture = ROOT
			religion = ROOT
			dynasty = 300001
		}
		new_character = {
			set_father = event_target:olaf_the_killer
			set_mother = event_target:olaf_spouse
			set_character_flag = immune_tuberculosis
			set_character_flag = immune_bubonic_plague
		}

		create_character = { # Olaf child 2
			female = no
			age = 3
			random_traits = yes
			culture = ROOT
			religion = ROOT
			dynasty = 300001
		}
		new_character = {
			set_father = event_target:olaf_the_killer
			set_mother = event_target:olaf_spouse
			set_character_flag = immune_tuberculosis
			set_character_flag = immune_bubonic_plague
		}

		create_character = { # TILDA
			name = "Tilda"
			female = yes
			age = 33
			culture = ROOT
			religion = ROOT
			trait = brilliant_strategist
			trait = cavalry_leader
			trait = flat_terrain_leader
			trait = master_of_flame
			trait = mystic
			trait = prevent_marriage
			trait = quick
			trait = strong
			trait = shrewd
			dynasty = 300000
		}
		new_character = {
			set_character_flag = is_ancient_one			
			set_character_flag = originated_from_chinese_court
			set_character_flag = immune_tuberculosis
			set_character_flag = immune_bubonic_plague
			character_event = { id = ACS.00006 } # Moves to the mercenary band
			create_sakya_child_effect = yes
			create_sakya_child_effect = yes
			create_sakya_child_effect = yes
		}

		create_character = { # Olaf father
			age = 60
			culture = event_target:olaf_the_killer
			religion = event_target:olaf_the_killer
			trait = ambitious
			trait = shrewd
			trait = physician
			trait = diligent
			trait = lustful
			trait = grey_eminence
			trait = administrator
			dynasty = 300001
		}
		new_character = {
			save_event_target_as = olaf_father
		}

		create_character = { # Olaf mother
			age = 55
			female = yes
			culture = event_target:olaf_the_killer
			religion = event_target:olaf_the_killer
			trait = fair
			trait = genius
			trait = shrewd
			trait = physician
			trait = diligent
			trait = midas_touched
			trait = administrator
			dynasty = none
		}
		new_character = {
			save_event_target_as = olaf_mother
		}

		create_character = { # Olaf brother. Bruh
			age = 30
			culture = event_target:olaf_the_killer
			religion = event_target:olaf_the_killer
			trait = fair
			trait = genius
			trait = shrewd
			trait = physician
			trait = diligent
			trait = midas_touched
			trait = administrator
			dynasty = 300001
		}
		new_character = {
			set_mother = event_target:olaf_mother
			set_father = event_target:olaf_father
			save_event_target_as = olaf_brother
		}

		create_character = { # Olaf 1st sister
			female = yes
			age = 18
			trait = grey_eminence
			trait = physician
			trait = scarred
			trait = fair
			trait = quick
			trait = shrewd
			trait = gardener
			trait = poet
			trait = diligent
			trait = lustful
			trait = proud
			trait = brave
			trait = erudite
			trait = defensive_leader
			culture = ROOT
			religion = ROOT
			dynasty = 300001
		}
		new_character = {
			set_mother = event_target:olaf_mother
			set_father = event_target:olaf_father
			create_pentaghast_child_effect = yes
			create_pentaghast_child_effect = yes
		}

		create_character = { # Olaf 2nd sister
			female = yes
			age = 18
			trait = grey_eminence
			trait = physician
			trait = scarred
			trait = fair
			trait = quick
			trait = shrewd
			trait = gardener
			trait = poet
			trait = diligent
			trait = lustful
			trait = proud
			trait = brave
			trait = erudite
			trait = defensive_leader
			culture = ROOT
			religion = ROOT
			dynasty = 300001
		}
		new_character = {
			set_mother = event_target:olaf_mother
			set_father = event_target:olaf_father
			create_pentaghast_child_effect = yes
			create_pentaghast_child_effect = yes
		}

		event_target:olaf_the_killer = {
			set_mother = event_target:olaf_mother
			set_father = event_target:olaf_father
		}
		# Olaf purges his family
		event_target:olaf_father = {
			death = { death_reason = death_murder_unknown killer = event_target:olaf_the_killer }
		}
		event_target:olaf_mother = {
			death = { death_reason = death_murder_unknown killer = event_target:olaf_the_killer }
		}
		event_target:olaf_brother = {
			death = { death_reason = death_murder_unknown killer = event_target:olaf_the_killer }
		}

		# KHALGA
		create_character = {
			name = Khalga
			female = no
			age = 5
			culture = event_target:olaf_the_killer
			religion = event_target:olaf_the_killer
			dynasty = none
			trait = fair
			trait = genius
			trait = byakugan
			trait = strong
			trait = prevent_marriage
			trait = khalga_blood
			trait = duelist
			trait = gamer
			trait = socializer
			trait = strategist
			trait = seducer
		}
		new_character = {
			set_character_flag = is_khalga
			set_character_flag = society_join_block
			set_character_flag = originated_from_chinese_court # to prevent to go to China
			set_character_flag = wolf_blood_first_generation
			set_character_flag = immune_tuberculosis
			set_character_flag = immune_bubonic_plague
			add_character_modifier = {
				name = wolf_child
				duration = -1
			}
			character_event = { id = ACS.00006 days = 3 }
		}
		# VEE
		create_character = {
			name = Vee
			dynasty = 300001
			dna = qqovluyitrm
			female = yes
			age = 15
			culture = event_target:olaf_the_killer
			religion = event_target:olaf_the_killer
			trait = fair
			trait = strong
			trait = mystic
			trait = sharingan
			trait = syrena
			trait = kind
			trait = lustful
			trait = diligent
			trait = proud
			trait = vee_blood
			trait = seductress
			trait = prevent_marriage
			trait = legit_bastard
			trait = ambitious
			trait = cynical
			trait = erudite
			trait = gregarious
			trait = lefthanded
		}
		new_character = {
			set_character_flag = is_vee	
			set_character_flag = society_join_block	
			set_character_flag = originated_from_chinese_court
			set_character_flag = immune_tuberculosis
			set_character_flag = immune_bubonic_plague
			set_father = event_target:olaf_the_killer
			culture = event_target:olaf_the_killer
		}

		96 = {
			spawn_disease = bubonic_plague
		}
	}
}

# ACS.00005 - AVAILABLE


# ACS.00006 - Find the current leader of the Pentaghast and Sakya mercenary band
character_event = {
	id = ACS.00006
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				OR = {
					has_character_flag = is_ancient_one
					has_character_flag = is_khalga
				}
			}
			random_character = {
				limit = { has_landed_title = d_mercenary_sakya }
				character_event = { id = ACS.00007 }				
			}
			break = yes
		}
	}
}

# ACS.00007 - Pentaghast-Sakya leader receives Olaf-Tilda/Vee-Khalga
character_event = {
	id = ACS.00007
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		if = {
			limit = {
				FROM = {
					has_character_flag = is_ancient_one
				}
			}
			FROM = {
				move_character = ROOT
				remove_trait = prevent_marriage
				d_mercenary_sakya = {
					grant_title = PREV
					set_defacto_liege = THIS
				}
				c_mercenary_sakya = {
					grant_title = PREV
					set_defacto_liege = THIS
				}
				join_society = sakya_society
				set_society_grandmaster = yes
			}
			break = yes
		}
		if = {
			limit = {
				FROM = {
					has_character_flag = is_khalga
				}
			}
			FROM = {
				move_character = ROOT
				culture = ROOT
				religion = ROOT
			}
			break = yes
		}
	}
}

# ACS.00012 - AVAILABLE

###################
## KHALGA TRAVEL ##
###################
# ACS.00013 - Khalga travelling every 5 years
character_event = {
	id = ACS.00013
	is_triggered_only = yes
	hide_window = yes
	has_character_flag = is_khalga
	min_age = 16

	immediate = {
		# Return all titles to liege
		liege = {
			save_event_target_as = khalga_liege
		}
		any_demesne_title = {
			gain_title = event_target:khalga_liege
		}

		# Select a suitable female
		random_playable_ruler = {
			limit = {
				is_female = yes
				is_landed = yes
				is_pregnant = no
				age >= 16
				age <= 50
			}
			impregnate_cuckoo = ROOT
		}
		death = { death_reason = death_poor_health }
	}
}

# ACS.00014 - Ensure inherit Khalga or Vee trait for cuckoo
character_event = {
	id = ACS.00014
	is_triggered_only = yes
	hide_window = yes

	trigger = {
		OR = {
			true_father_even_if_dead = {
				trait = khalga_blood
			}
			true_father_even_if_dead = {
				trait = vee_blood
			}
		}
	}

	immediate = {
		if = {
			limit = {
				true_father_even_if_dead = {
					trait = khalga_blood
				}
			}
			add_trait = khalga_blood			
		}
		if = {
			limit = {
				true_father_even_if_dead = {
					trait = vee_blood
				}
			}
			add_trait = vee_blood			
		}
	}
}

# ACS.00015 - AVAILABLE

# ACS.00016 - AVAILABLE

#########################
## KHALGA RESURRECTION ##
#########################
# ACS.00017 - Select a character to resurrect Khalga if he dies
character_event = {
	id = ACS.00017
	hide_window = yes
	is_triggered_only = yes
	has_character_flag = is_khalga

	trigger = {
		NOT = { has_character_flag = dont_resucite }
	}

	immediate = {
		random_playable_ruler = {
			save_event_target_as = new_khalga_ruler
			create_khalga_effect = yes
		}		
	}
}

# ACS.00018 - AVAILABLE

# ACS.00019 - AVAILABLE

# ACS.00020 - AVAILABLE

# ACS.00021 - AVAILABLE

##########################
## VEE LIFECYCLE EVENTS ##
##########################
# ACS.00025 - Vee migrates to another body
character_event = {
	id = ACS.00025
	hide_window = yes
	is_triggered_only = yes
	has_character_flag = is_vee

	immediate = {
		ROOT = {
			if = {
				limit = {
					age >= 33
				}
				death = { death_reason = death_poor_health }
			}
		}
	}
}

# ACS.00028 - AVAILABLE

##############################################
# ACS.00029 - Dojutsu inheritance mechanics ##
##############################################
character_event = {
	id = ACS.00029
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		OR = {
			trait = khalga_blood
			trait = vee_blood
		}
	}

	immediate = {
		# BYAKUGAN INHERITANCE BOTH
		if = {
			limit = {
				true_father_even_if_dead = {
					trait = khalga_blood
				}
				mother_even_if_dead = {
					trait = khalga_blood
				}							
			}
			set_character_flag = evaluated_both_byakugan
			random_list = {
				15 = { add_trait = byakugan }
				85 = { }
			}			
		}
		# BYAKUGAN INHERITANCE
		if = {
			limit = {
				NOT = { has_character_flag = evaluated_both_byakugan }
				OR = {
					true_father_even_if_dead = {
						trait = khalga_blood
					}
					mother_even_if_dead = {
						trait = khalga_blood
					}
				}				
			}
			random_list = {
				7 = { add_trait = byakugan }
				93 = { }
			}			
		}

		# SHARINGAN INHERITANCE
		if = {
			limit = {				
				true_father_even_if_dead = {
					trait = vee_blood
				}
				mother_even_if_dead = {
					trait = vee_blood
				}
			}
			set_character_flag = evaluated_both_sharingan
			random_list = {
				15 = { add_trait = sharingan }
				85 = { }
			}
		}
		if = {
			limit = {
				NOT = { has_character_flag = evaluated_both_sharingan }
				OR = {
					true_father_even_if_dead = {
						trait = vee_blood
					}
					mother_even_if_dead = {
						trait = vee_blood
					}
				}
			}
			random_list = {
				7 = { add_trait = sharingan }
				93 = { }
			}
		}

		# Checks if has the two bloodlines
		if = {
			limit = {
				trait = khalga_blood
				trait = vee_blood
			}
			random_list = {
				999999 = {
					add_trait = malnourished
					add_trait = depressed
					add_trait = incapable
					add_trait = infirm
					add_trait = lunatic
					add_trait = maimed
					add_trait = scarred_high
					add_trait = wounded
					add_trait = blinded
					add_trait = clubfooted
					add_trait = dwarf
					add_trait = harelip
					add_trait = hunchback
					add_trait = imbecile
					add_trait = inbred
					add_trait = lisp
					add_trait = slow
					add_trait = stutter
					add_trait = weak
				}
				1 = {
					add_trait = rinnegan
				}
			}
		}
	}
}

# ACS.00030 - AVAILABLE

# ACS.00034 - Resurrect Vee if she dies
character_event = {
	id = ACS.00034
	hide_window = yes
	is_triggered_only = yes
	has_character_flag = is_vee

	immediate = {
		dynasty_head = {
			save_event_target_as = pentaghast_leader
			create_character = {
				female = yes
				culture = event_target:pentaghast_leader
				religion = event_target:pentaghast_leader
				age = 0
				trait = fair
				trait = strong
				trait = mystic
				trait = sharingan
				trait = syrena
				trait = kind
				trait = lustful
				trait = diligent
				trait = proud
				trait = vee_blood
				trait = seductress
				trait = prevent_marriage
				trait = legit_bastard
				trait = ambitious
				trait = cynical
				trait = erudite
				trait = gregarious
				trait = lefthanded
				dynasty = event_target:pentaghast_leader
			}
			new_character = {
				set_character_flag = is_vee
				set_father = event_target:pentaghast_leader
				set_character_flag = immune_bubonic_plague
			}
		}
	}
}

# ACS.00035 - Notification to all dynasty members of Vee
narrative_event = {
	id = ACS.00035
	title = ACS_00035_TITLE
	desc = ACS_00035_DESC
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = OK
	}
}

########################
##    VEE PARTNER     ##
########################
# ACS.00036 - Search a spouse for Vee if she isn't married
character_event = {
	id = ACS.00036
	is_triggered_only = yes
	hide_window = yes
	has_character_flag = is_vee

	trigger = {
		is_married = no
		age >= 16
	}

	immediate = {
		character_event = { id = ACS.00039 days = 15 } # Flag for the winner
		narrative_event = { id = ACS.00040 days = 30 } # Notify the winner
		liege = {
			save_event_target_as = vee_liege
		}
		any_dynasty_member = {
			narrative_event = { id = ACS.00035 }
		}
		any_character = {
			limit = {
				can_marry = yes
				is_inaccessible_or_incapable_trigger = no
				religion_group = event_target:vee_liege
				NOT = { dynasty = 300001 }
				age = 16
				NOT = { age = 50 }
				is_female = no
				NOT = { trait = celibate }
				NOT = { trait = eunuch }
				NOT = { has_character_flag = is_khalga }
				OR = {
					real_tier = EMPEROR
					real_tier = KING
					real_tier = DUKE
					real_tier = COUNT
					real_tier = BARON
				}
				is_landed = yes
			}
			letter_event = { id = ACS.00037 } # Notification for participation
		}
	}
}

# ACS.00037 - Notification for participation
letter_event = {
	id = ACS.00037
	desc = ACS_00037_DESC
	is_triggered_only = yes

	option = {
		name = ACS_00037_OPT_A
		set_character_flag = evaluation_for_vee
		will_not_marry_effect = yes
		character_event = { id = ACS.00038 }
	}

	option = {
		name = ACS_00037_OPT_B
	}
}

# ACS.00038 - Assign score for participants
character_event = {
	id = ACS.00038
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		character_event = { id = ACS.00042 days = 45 } # Clean flags, trait and modifiers
		random_list = {
			20 = { # EMPEROR list
				set_character_flag = evaluation_vee_score_5
				modifier = {
					factor = 0
					OR = {
						real_tier = KING
						real_tier = DUKE
						real_tier = COUNT
						real_tier = BARON
					}
				}
			}			
			20 = { # KING tier list
				set_character_flag = evaluation_vee_score_4
				modifier = {
					factor = 0
					OR = {
						real_tier = EMPEROR
						real_tier = DUKE
						real_tier = COUNT
						real_tier = BARON
					}
				}
			}
			20 = { # DUKE tier list
				set_character_flag = evaluation_vee_score_3
				modifier = {
					factor = 0
					OR = {
						real_tier = EMPEROR
						real_tier = KING
						real_tier = COUNT
						real_tier = BARON
					}
				}
			}
			20 = { # COUNT tier list
				set_character_flag = evaluation_vee_score_2
				modifier = {
					factor = 0
					OR = {
						real_tier = EMPEROR
						real_tier = KING
						real_tier = DUKE
						real_tier = BARON
					}
				}
			}
			20 = { # BARON heir tier list
				set_character_flag = evaluation_vee_score_1
				modifier = {
					factor = 0
					OR = {
						real_tier = EMPEROR
						real_tier = KING
						real_tier = DUKE
						real_tier = COUNT
					}
				}
			}
		}
	}
}

# ACS.00039 - Assign a flag for the winner
character_event = {
	id = ACS.00039
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		random_character = {
			limit = {
				has_character_flag = evaluation_vee_score_5
				has_character_flag = evaluation_for_vee
			}
			clr_character_flag = evaluation_vee_score_5
			set_character_flag = tournament_vee_winner
			break = yes
		}
		random_character = {
			limit = {
				has_character_flag = evaluation_vee_score_4
				has_character_flag = evaluation_for_vee
			}
			clr_character_flag = evaluation_vee_score_4
			set_character_flag = tournament_vee_winner
			break = yes
		}
		random_character = {
			limit = {
				has_character_flag = evaluation_vee_score_3
				has_character_flag = evaluation_for_vee
			}
			clr_character_flag = evaluation_vee_score_3
			set_character_flag = tournament_vee_winner
			break = yes
		}
		random_character = {
			limit = {
				has_character_flag = evaluation_vee_score_2
				has_character_flag = evaluation_for_vee
			}
			clr_character_flag = evaluation_vee_score_2
			set_character_flag = tournament_vee_winner
			break = yes
		}
		random_character = {
			limit = {
				has_character_flag = evaluation_vee_score_1
				has_character_flag = evaluation_for_vee
			}
			clr_character_flag = evaluation_vee_score_1
			set_character_flag = tournament_vee_winner
			break = yes
		}
	}
}

# ACS.00040 - Select the winner and send a notification
character_event = {
	id = ACS.00040
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		random_character = {
			limit = {
				has_character_flag = tournament_vee_winner
			}
			narrative_event = { id = ACS.00041 }
		}
	}
}

# ACS.00041 - Winner receives a fancy notification
narrative_event = {
	id = ACS.00041
	title = ACS_00041_TITLE
	desc = ACS_00041_DESC
	is_triggered_only = yes

	option = {
		name = OK
		FROMFROM = { # Vee
			add_spouse = ROOT
			any_dynasty_member = {
				narrative_event = { id = ACS.00047 }
			}
		}
		ROOT = {
			add_character_modifier = {
				name = married_with_vee
				duration = -1
			}
			add_trait = ambitious
		}
	}
}

# ACS.00042 - Clean flags, trait and modifiers
character_event = {
	id = ACS.00042
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		remove_character_modifier = will_not_marry
		remove_trait = cannot_marry
		clr_character_flag = tournament_vee_winner
		clr_character_flag = evaluation_for_vee
		clr_character_flag = evaluation_vee_score_1
		clr_character_flag = evaluation_vee_score_2
		clr_character_flag = evaluation_vee_score_3
		clr_character_flag = evaluation_vee_score_4
		clr_character_flag = evaluation_vee_score_5
	}
}

# ACS.00045 - Vee has childs every 2 years to balance Khalga's byakugan
character_event = {
	id = ACS.00045
	hide_window = yes
	is_triggered_only = yes
	has_character_flag = is_vee

	trigger = {
		is_married = yes
		is_pregnant = no
	}

	immediate = {
		random_spouse = {
			save_event_target_as = vee_spouse
		}
		ROOT = {
			impregnate = event_target:vee_spouse
		}
	}
}

# ACS.00046 - Vee returns to dynasty head if husband dies
character_event = {
	id = ACS.00046
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		any_spouse = {
			has_character_flag = is_vee
		}
	}

	immediate = {
		ROOT = {
			random_spouse = {
				limit = {
					has_character_flag = is_vee
				}
				dynasty_head = {
					save_event_target_as = dynasty_target
				}
				move_character = event_target:dynasty_target
				any_child = {
					limit = {
						age <= 15
						is_landed = no
						is_ruler = no
					}
					move_character = event_target:dynasty_target
				}
			}
		}
	}
}

# ACS.00047 - Notification to all dynasty members of Vee after marriage
narrative_event = {
	id = ACS.00047
	title = ACS_00047_TITLE
	desc = ACS_00047_DESC
	is_triggered_only = yes

	trigger = {
		ai = no
	}

	option = {
		name = OK
	}
}


##############################
## MANGEKYO EVENTS ###########
##############################
# ACS.00048 - Choice for the mangekyo every 5 years
narrative_event = {
	id =  ACS.00048
	title = ACS_00048_TITLE
	desc = ACS_00048_DESC
	picture = GFX_evt_spymaster
	is_triggered_only = yes

	trigger = {
		trait = sharingan
		trait = ambitious
		NOT = { trait = mangekyo_sharingan }
		OR = {
			num_of_friends >= 1
			num_of_lovers >= 1
		}
	}

	option = {
		name = ACS_00048_OPT_A
		trigger = {
			num_of_friends >= 1
		}
		random_friend = {
			narrative_event = { id = ACS.00049 }
		}
	}

	option = {
		name = ACS_00048_OPT_B
		trigger = {
			num_of_lovers >= 1
		}
		random_lover = {
			narrative_event = { id = ACS.00049 }
		}
	}

	option = {
		name = ACS_00048_OPT_C
	}
}

# ACS.00048 - Intrigue or duel with the defender
narrative_event = {
	id = ACS.00049
	title = ACS_00049_TITLE
	desc = ACS_00049_DESC
	picture = GFX_evt_spymaster
	is_triggered_only = yes

	immediate = {
		save_event_target_as = combatant_2
		character_event = { id = ACS.00051 }
		FROM = {
			save_event_target_as = combatant_1
			character_event = { id = ACS.00052 }
		}
	}	
}

# ACS.00050 - The attacker gets the mangekyo
narrative_event = {
	id = ACS.00050
	title = ACS_00050_TITLE
	desc = ACS_00050_DESC
	picture = GFX_evt_tiamat
	is_triggered_only = yes

	option = {
		name = OK
		add_trait = mangekyo_sharingan
		remove_trait = sharingan
	}
}

# ACS.00051 - Defender surprised by the attacker
character_event = {
	id = ACS.00051
	title = ACS_00051_TITLE
	desc = ACS_00051_DESC
	picture = GFX_evt_tiamat
	is_triggered_only = yes

	option = {
		name = ACS_00051_OPT_A
	}
}

##################################################
## This should end with the dead of one of them ##
##################################################

character_event = {
    id = ACS.00052 # HFP.10100
    is_triggered_only = yes
    hide_window = yes
    trigger = {        
    }

    immediate = {      
        #Chooses a body part for injury (if it occurs), also for loc purposes (effect handles both characters)
        set_potential_injury_flag_effect = yes

        #Scripted effect requiring event-targets combatant_1 & combatant_2! RAW NUMBERS...
        evaluate_duel_result_score_effect = yes

        #Room for extra special calculations... (based on traits, and other special circumstances?)
        evaluate_extra_duel_result_score_effect = yes

        #Send the correct result event (from random_list)...
        send_mangekyo_duel_result_event_effect = yes 
    }
}
